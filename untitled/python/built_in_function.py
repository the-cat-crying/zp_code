# -*- coding:utf-8 -*-
import math

# ************************************************* abs() ************************************************
"""abs() 函数返回数字的绝对值"""
print('abs(-4)', abs(-4))
# ************************************************* divmod() *********************************************
"""divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)"""
print('divmod(8, 3)', divmod(8, 3))
# ************************************************* input() **********************************************
"""input() 函数接受一个标准输入数据，返回为 string 类型。"""
print(input('输入数字:'))
# ************************************************* staticmethod *****************************************
"""staticmethod 返回函数的静态方法。"""
# ************************************************* classmethod ******************************************
"""
classmethod 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。

class A(object):
    bar = 1
    def func1(self):  
        print ('foo') 
    @classmethod
    def func2(cls):
        print ('func2')
        print (cls.bar)
        cls().func1()   # 调用 foo 方法
 
A.func2()               # 不需要实例化
"""
# ************************************************* open() ***********************************************
"""open打开一个文件'txt'"""
# ************************************************* all() ************************************************
"""all()函数用于判断给定的<可迭代参数>iterable中的所有元素是否都为TRUE，如果是返回True，否则返回False;元素除了是0、空、None、False外都算True"""
print('all([1, 0, True])', all([1, 0, True]))
print('all((2, 4, 6))', all((2, 4, 6)))
# ************************************************* enumerate() ******************************************
"""
enumerate()函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出<数据>和对应的<索引>，一般用在for循环当中。
enumerate(sequence, [start=0])
    sequence -- 一个序列、迭代器或其他支持迭代对象。
    start -- 下标起始位置。
"""
# ************************************************* ord() *************************************************
"""
ord()函数是chr()函数（对于8位的ASCII字符串或unichr()函数（对于Unicode对象）的配对函数，
它以一个字符（长度为1的字符串）作为参数，返回对应的ASCII数值，或者Unicode数值，
如果所给的Unicode字符超出了你的Python定义范围，则会引发一个TypeError的异常。
"""
print("ord('a')", ord('a'))  # 返回值是对应的十进制整数
# ************************************************* chr() *************************************************
"""
chr() 用一个整数作参数，返回一个对应的字符。
chr(i)
    i -- 可以是 10 进制也可以是 16 进制的形式的数字，数字范围为 0 到 1,114,111 (16 进制为0x10FFFF)。
"""
print('chr(0x30)', chr(0x30))
# ************************************************* any() *************************************************
"""
any() 函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True。
元素除了是 0、空、FALSE 外都算 TRUE。
"""
print('any([0, 1, 3])', any([0, 1, 3]))
# ************************************************* eval() ************************************************
"""
eval() 函数用来执行一个字符串表达式，并返回表达式的值。
eval(expression[, globals[, locals]])
    expression -- 表达式.
    globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象.
    locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象.
"""
print("eval('3 * 4')", eval('3 * 4'))
print("eval('pow(2, 2)')", eval('pow(2, 2)'))
# ************************************************* isinstance() ******************************************
"""
isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。
isinstance(object, classinfo)
    object -- 实例对象。
    classinfo -- 可以是直接或间接类名、基本类型或者由它们组成的元组。
"""
print('isinstance(4, int)', isinstance(4, int))
print('isinstance(4, (int, float, str))', isinstance(4, (int, float, str)))
# ************************************************* pow() *************************************************
"""
pow() 方法返回 xy（x 的 y 次方） 的值
math.pow( x, y ) pow(x, y[, z])
函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y)%z。
注意：pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。
    x -- 数值表达式。
    y -- 数值表达式。
    z -- 数值表达式。
"""
print("pow(100, 2) : ", pow(100, 2))
print("pow(100, 2, 10) : ", pow(100, 2, 10))
print("math.pow(100, -2) : ", math.pow(100, -2))
# ************************************************* sum() *************************************************
"""
sum() 方法对序列进行求和计算
sum(iterable[, start])
    iterable -- 可迭代对象，如：列表、元组、集合。
    start -- 指定相加的参数，如果没有设置这个值，默认为0。 
"""
print('sum([2, 3, 4])', sum([2, 3, 4]))
print('sum((1, 2, 3))', sum((1, 2, 3)))
print('sum((1, 2, 3), 10)', sum((1, 2, 3), 10))  # 列表计算总和后再加10
# ************************************************* execfile() ********************************************
"""
execfile() 函数可以用来执行一个文件。
execfile(filename[, globals[, locals]])
    filename -- 文件名。
    globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。
    locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象
假设文件 hello.py，内容如下：print('runoob')
>>>execfile('hello.py') execfile 调用该文件
"""
# ************************************************* issubclass() ******************************************
"""
issubclass() 方法用于判断参数 class 是否是类型参数 classinfo 的子类。
issubclass(class, classinfo)
    class -- 类。
    classinfo -- 类。
如果 class 是 classinfo 的子类返回 True，否则返回 False。
class A:  父类
    pass
class B(A): 子类
    pass
print(issubclass(B,A))    # 返回 True
"""
# ************************************************* super() ***********************************************
"""
super() 函数是用于调用父类(超类)的一个方法。
super 用来解决多重继承问题，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。
MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。
super(type[, object-or-type])
    type -- 类。
    object-or-type -- 类，一般是 self 

class A:
     def add(self, x):
         y = x+1
         print(y)
class B(A):
    def add(self, x):
        super().add(x)
b = B()
b.add(2)  # python3
"""
# ************************************************* bin() ************************************************
"""
bin() 返回一个整数 int 或者长整数 long int 的二进制表示。
bin(x)
    x -- int 或者 long int 数字
"""
print('bin(10)', bin(10))
# ************************************************* iter() ***********************************************
"""
iter() 函数用来生成迭代器。
iter(object[, sentinel])
    object -- 支持迭代的集合对象。
    sentinel -- 如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，
iter 创建了一个迭代器对象，每次调用这个迭代器对象的__next__()方法时，都会调用 object。
"""
lst = [1, 2, 3]
for i in iter(lst):
    print('iter', i)
# ************************************************* next() ***********************************************
"""
next() 返回迭代器的下一个项目。
next() 函数要和生成迭代器的iter() 函数一起使用。
next(iterable[, default])
    iterable -- 可迭代对象
    default -- 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。

# 首先获得Iterator对象:
it = iter([1, 2, 3, 4, 5])
# 循环:
while True:
    try:
        # 获得下一个值:
        x = next(it)
        print(x)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
"""
# ************************************************* property() *******************************************
"""
property() 函数的作用是在新式类中返回属性值.
class property([fget[, fset[, fdel[, doc]]]])
    fget -- 获取属性值的函数 
    fset -- 设置属性值的函数 
    fdel -- 删除属性值函数
    doc -- 属性描述信息

定义一个可控属性值 x
class C(object):
    def __init__(self):
        self._x = None
 
    def getx(self):
        return self._x
 
    def setx(self, value):
        self._x = value
 
    def delx(self):
        del self._x
 
    x = property(getx, setx, delx, "I'm the 'x' property.")
c = C
c 是 C 的实例化, c.x 将触发 getter,c.x = value 将触发 setter ， del c.x 触发 deleter。
如果给定 doc 参数，其将成为这个属性值的 docstring，否则 property 函数就会复制 fget 函数的 docstring（如果有的话）
"""
# ************************************************* bool() *********************************************
"""
bool() 函数用于将给定参数转换为布尔类型，如果没有参数，返回 False。
bool 是 int 的子类。
class bool([x])
    x -- 要进行转换的参数。
返回 True 或 False。
>>> bool(0)
False
>>> bool(1)
True
"""
print('bool(0)', bool(0))
print('bool(1)', bool(1))
print('issubclass(bool, int)', issubclass(bool, int))
# ************************************************* filter() *******************************************
"""
filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。
该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。
filter(function, iterable)
    function -- 判断函数。
    iterable -- 可迭代对象。
返回一个迭代器对象
"""


def is_odd(n):
    return n % 2 == 1


print('filter', filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
# ************************************************* setattr() *******************************************
"""
setattr() 函数对应函数 getattr()，用于设置属性值，该属性不一定是存在的。
setattr(object, name, value)
    object -- 对象。
    name -- 字符串，对象属性。
    value -- 属性值。

>>>class A(object):
...     bar = 1
>>> a = A()
>>> getattr(a, 'bar')          # 获取属性 bar 值
1
>>> setattr(a, 'bar', 5)       # 设置属性 bar 值
>>> a.bar
5

>>>class A():
...     name = "runoob"
>>> a = A()
>>> setattr(a, "age", 28)      # 如果属性不存在会创建一个新的对象属性，并对属性赋值：
>>> print(a.age)
28
"""
# ************************************************* dir() ************************************************
"""
dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，
该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。
dir([object])
    object -- 对象、变量、类型。
"""
print('dir()', dir())  # 获得当前模块的属性列表
print('dir([])', dir([]))  # 查看列表的方法
# ************************************************* hex() ************************************************
"""
hex() 函数用于将一个指定数字转换为 16 进制数。
hex(x)
    x -- 一个整数
"""
print('hex(30)', hex(30))
# ************************************************* slice() **********************************************
"""
slice() 函数实现切片对象，主要用在切片操作函数里的参数传递。
class slice(stop)
class slice(start, stop[, step])
    start -- 起始位置
    stop -- 结束位置
    step -- 间距
返回一个切片对象。

>>>myslice = slice(5)    # 设置截取5个元素的切片
>>> myslice
slice(None, 5, None)
>>> arr = range(10)
>>> arr
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> arr[myslice]         # 截取 5 个元素
[0, 1, 2, 3, 4]
"""
# ************************************************* id() *************************************************
"""
id() 函数返回对象的唯一标识符，标识符是一个整数。
CPython 中 id() 函数用于获取对象的内存地址。
    id([object])
"""
print('id(30)', id(30))
# ************************************************* sorted() *********************************************
"""
sorted() 函数对所有可迭代的对象进行排序操作。
    sort 与 sorted 区别：
    sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。
    list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作.
sorted(iterable, key=None, reverse=False) 
    iterable -- 可迭代对象。
    key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
    reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
"""
print('sorted([3, 1, 5])', sorted([3, 1, 5]))
print('sorted([2, 4, 1, 3], key=lambda x: x*-1)', sorted([2, 4, 1, 3], key=lambda g: g*-1))  # 利用key进行倒序排序
# ************************************************* ascii() **********************************************
"""
ascii() 函数类似 repr() 函数, 返回一个表示对象的字符串, 但是对于字符串中的非 ASCII 字符则返回通过 repr()。 
生成字符串类似 Python2 版本中 repr() 函数的返回值。
ascii(object)
    object -- 对象。
"""
print("ascii('runoob')", ascii('runoob'))
# ************************************************* repr() ***********************************************
"""
repr() 函数将对象转化为供解释器读取的形式。
repr(object)
    object -- 对象。
返回一个对象的 string 格式。
"""
print("repr({'runoob': 'runoob.com', 'google': 'google.com'})", repr({'runoob': 'runoob.com', 'google': 'google.com'}))
# ************************************************* oct() ************************************************
"""
oct() 函数将一个整数转换成 8 进制字符串，8 进制以 0o 作为前缀表示。
oct(x)
    x -- 整数。
"""
# ************************************************* int() ************************************************
"""
int() 函数用于将一个字符串或数字转换为整型。
class int(x, base=10)
    x -- 字符串或数字。
    base -- 进制数，默认十进制。
"""
# ************************************************* exec() ***********************************************
"""
exec 执行储存在字符串或文件中的 Python 语句，相比于 eval，exec可以执行更复杂的 Python 代码。
exec(object[, globals[, locals]])
    object：必选参数，表示需要被指定的Python代码。它<必须是字符串或code对象>。如果object是一个字符串，该字符串会先被解析为一组Python语句，
           然后在执行（除非发生语法错误）。如果object是一个code对象，那么它只是被简单的执行。
    globals：可选参数，表示全局命名空间（存放全局变量），如果被提供，则必须是一个字典对象。
    locals：可选参数，表示当前局部命名空间（存放局部变量），如果被提供，可以是任何映射对象。如果该参数被忽略，那么它将会取与globals相同的值。
exec 返回值永远为 None。
"""
exec("print('good boy')")
print(exec("""for i in range(5):print ("iter time: %d" % i)"""))

x = 10
expr = """z = 30;sum = x + y + z;print(sum)"""


def func():
    y = 20
    exec(expr)
    exec(expr, {'x': 1, 'y': 2})
    exec(expr, {'x': 1, 'y': 2}, {'y': 3, 'z': 4})


func()
# ************************************************* format() *********************************************
"""
一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
基本语法是通过 {} 和 : 来代替以前的 % 。
format 函数可以接受不限个参数，位置可以不按顺序。
print("{} {}".format("hello", "world"))    # 不设置指定位置，按默认顺序
print("{1} {0}".format("hello", "world"))  # 设置指定位置
print("{:.2f}".format(3.1415926))          # str.format() 格式化数字的多种方法：
"""
# ************************************************* frozenset() ******************************************
"""
frozenset() 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。
class frozenset([iterable])
    iterable -- 可迭代的对象，比如列表、字典、元组等等。
返回新的 frozenset 对象，如果不提供任何参数，默认会生成空集合。
"""
print('frozenset', frozenset([2, 3, 4, 5]))  # 创建不可变集合
# ************************************************* vars() ***********************************************
"""
vars() 函数返回对象object的属性和属性值的字典对象。
vars([object])
    object -- 对象
返回对象object的属性和属性值的字典对象，如果没有参数，就打印当前调用位置的属性和属性值 类似 locals()。
"""
print(vars())


class Runoob:
    a = 1


print(vars(Runoob()))
# ************************************************* locals() *********************************************
"""
locals() 函数会以字典类型返回当前位置的全部局部变量。
对于函数, 方法, lambda 函式, 类, 以及实现了 __call__ 方法的类实例, 它都返回 True。 
locals()

>>>def runoob(arg):    # 两个局部变量：arg、z
        z = 1
        print (locals())
>>> runoob(4)
{'z': 1, 'arg': 4}      # 返回一个名字/值对的字典
"""
# ************************************************* zip() ************************************************
"""
zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。
我们可以使用 list() 转换来输出列表。
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表
zip([iterable, ...])
    iterabl -- 一个或多个迭代器;
返回一个对象。

>>> a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)                # 返回一个对象
>>> zipped
<zip object at 0x103abc288>
>>> list(zipped)                     # list() 转换为列表
[(1, 4), (2, 5), (3, 6)]
>>> list(zip(a,c))                   # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]
>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式
>>> list(a1)
[1, 2, 3]
>>> list(a2)
[4, 5, 6]
"""
# ************************************************* compile() ********************************************
"""
compile() 函数将一个字符串编译为字节代码。
compile(source, filename, mode[, flags[, dont_inherit]])
    source -- 字符串或者AST（Abstract Syntax Trees）对象。。
    filename -- 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。
    mode -- 指定编译代码的种类。可以指定为 exec, eval, single。
    flags -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。
    flags和dont_inherit是用来控制编译源码时的标志
返回表达式执行结果。

>>>str = "for i in range(0,10): print(i)" 
>>> c = compile(str,'','exec')   # 编译为字节代码对象 
>>> c
<code object <module> at 0x10141e0b0, file "", line 1>
>>> exec(c)
0
1
2
3
4
5
6
7
8
9
>>> str = "3 * 4 + 5"
>>> a = compile(str,'','eval')
>>> eval(a)
17
"""
# ************************************************* globals() ********************************************
"""
globals() 函数会以字典类型返回当前位置的全部全局变量。
globals()
返回全局变量的字典。

>>>a='runoob'
>>> print(globals())  # globals 函数返回一个全局变量的字典，包括所有导入的变量。
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__doc__': 
None, 'a': 'runoob', '__package__': None}
"""
# ************************************************* map() ************************************************
"""
map() 会根据提供的函数对指定序列做映射。
第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。
map(function, iterable, ...)
    function -- 函数
    iterable -- 一个或多个序列

>>>def square(x) :            # 计算平方数
...     return x ** 2

>>> map(square, [1,2,3,4,5])   # 计算列表各个元素的平方
[1, 4, 9, 16, 25]
>>> map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数
[1, 4, 9, 16, 25]
 
# 提供了两个列表，对相同位置的列表数据进行相加
>>> map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
[3, 7, 11, 15, 19]
"""
# ************************************************* reversed() *******************************************
"""
reversed 函数返回一个反转的迭代器。
reversed(seq)
    seq -- 要转换的序列，可以是 tuple, string, list 或 range。
返回一个反转的迭代器。

# 字符串
seqString = 'Runoob'
print(list(reversed(seqString)))
['b', 'o', 'o', 'n', 'u', 'R']
# 元组
seqTuple = ('R', 'u', 'n', 'o', 'o', 'b')
print(list(reversed(seqTuple)))
['b', 'o', 'o', 'n', 'u', 'R']
# range
seqRange = range(5, 9)
print(list(reversed(seqRange)))
[8, 7, 6, 5]
# 列表
seqList = [1, 2, 4, 3, 5]
print(list(reversed(seqList)))
[5, 3, 4, 2, 1]
"""
# ************************************************* __import__() *****************************************
"""
__import__() 函数用于动态加载类和函数 。
如果一个模块经常变化就可以使用 __import__() 来动态载入。
__import__ 语法：
    __import__(name[, globals[, locals[, fromlist[, level]]]])
        name -- 模块名
返回元组列表。
import os  
print ('在 a.py 文件中 %s' % id(os))  # 在a.py文件中的代码

import sys  
__import__('a')        # 在另一个.py文件中导入 a.py 模块
"""
# ************************************************* complex() ********************************************
"""
complex() 函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。
complex 语法：
    class complex([real[, imag]])
        real -- int, long, float或字符串；
        imag -- int, long, float；
返回一个复数

>>>complex(1, 2)
(1 + 2j)
>>> complex(1)      # 数字
(1 + 0j)
>>> complex("1")    # 当做字符串处理
(1 + 0j)
>>> complex("1+2j")  # 注意：这个地方在"+"号两边不能有空格，也就是不能写成"1 + 2j"，应该是"1+2j"，否则会报错
(1 + 2j)
"""
# ************************************************* hasattr() ********************************************
"""
hasattr() 函数用于判断对象是否包含对应的属性。
hasattr 语法：
    hasattr(object, name) 
        object -- 对象。
        name -- 字符串，属性名。
如果对象有该属性返回 True，否则返回 False。
class Coordinate:
    x = 10
    y = -5
    z = 0
 
point1 = Coordinate() 
print(hasattr(point1, 'x'))  True
print(hasattr(point1, 'y'))  True
print(hasattr(point1, 'z'))  True
print(hasattr(point1, 'no')) False # 没有该属性
"""
# ************************************************* round() **********************************************
"""
round() 方法返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。
精度要求高的，不建议使用该函数。
round() 方法的语法:
    round( x [, n]  )
        x -- 数字表达式。
        n -- 表示保留小数点位数，默认值为 0
"""
# ************************************************* delattr() ********************************************
"""
delattr 函数用于删除属性。
delattr(x, 'foobar') 相等于 del x.foobar。
delattr 语法：
    delattr(object, name)
        object -- 对象。
        name -- 必须是对象的属性。
class Coordinate:
    x = 10
    y = -5
    z = 0

point1 = Coordinate() 

print('x = ',point1.x)
print('y = ',point1.y)
print('z = ',point1.z)

delattr(Coordinate, 'z')

print('--删除 z 属性后--')
print('z = ',point1.z)  # 触发错误
"""
# ************************************************* hash() ***********************************************
"""
hash() 用于获取取一个对象（字符串或者数值等）的哈希值。
hash 语法：
    hash(object)
        object -- 对象；
返回对象的哈希值。
>>>hash('test')                 # 字符串
2314058222102390712
>>> hash(1)                     # 数字
1
>>> hash(str([1,2,3]))          # 集合
1335416675971793195
>>> hash(str(sorted({'1':1})))  # 字典
7666464346782421378
"""
# ************************************************* memoryview() *****************************************
"""
memoryview() 函数返回给定参数的内存查看对象(memory view)。
所谓内存查看对象，是指对支持缓冲区协议的数据进行包装，在不需要复制对象基础上允许Python代码访问。
memoryview 语法：
    memoryview(obj)
        obj -- 对象
返回元组列表。
>>>v = memoryview('abcefg')
>>> v[1]
'b'
>>> v = memoryview(bytearray("abcefg", 'utf-8'))
>>> print(v[1])
98
>>> print(v[-1])
103
>>> print(v[1:4])
<memory at 0x10f543a08>
>>> print(v[1:4].tobytes())
b'bce'
"""
# ************************************************* end *************************************************
